
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "content/SSHydro/plot_2_pyCATHY_inputs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_content_SSHydro_plot_2_pyCATHY_inputs.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_content_SSHydro_plot_2_pyCATHY_inputs.py:


Input plots
===========

Weill, S., et al. « Coupling Water Flow and Solute Transport into a Physically-Based Surface–Subsurface Hydrological Model ». 
Advances in Water Resources, vol. 34, no 1, janvier 2011, p. 128‑36. DOI.org (Crossref), 
https://doi.org/10.1016/j.advwatres.2010.10.001.

This example shows how to use pyCATHY object to plot inputs of the hydrological model.

*Estimated time to run the notebook = 5min*

.. GENERATED FROM PYTHON SOURCE LINES 14-19

.. code-block:: Python


    # map_prop_veg ?
    # map_prop2zone









.. GENERATED FROM PYTHON SOURCE LINES 20-26

.. code-block:: Python


    import numpy as np

    from pyCATHY import cathy_tools
    from pyCATHY.plotters import cathy_plots as cplt








.. GENERATED FROM PYTHON SOURCE LINES 27-34

.. code-block:: Python

    path2prj = "../SSHydro/"  # add your local path here
    simu = cathy_tools.CATHY(dirName=path2prj, 
    			prj_name="weill_exemple_inputs_plot"
    			)
			
    # simu.run_preprocessor()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    🏁 Initiate CATHY object




.. GENERATED FROM PYTHON SOURCE LINES 35-36

simu.show_input(prop="dem")

.. GENERATED FROM PYTHON SOURCE LINES 38-46

.. code-block:: Python


    # show time atmbc
    # simu.show_input(prop='atmbc')

    # In progress --> show spatial atmbc

    # simu.update_dem_parameters()
    # simu.update_prepo_inputs()







.. GENERATED FROM PYTHON SOURCE LINES 50-51

Add a new zone

.. GENERATED FROM PYTHON SOURCE LINES 51-60

.. code-block:: Python



    simu.update_prepo_inputs()
    simu.update_veg_map(np.ones([int(simu.hapin['N']),int(simu.hapin['M'])]))
    simu.update_zone(np.ones([int(simu.hapin['N']),int(simu.hapin['M'])]))
    simu.show_input(prop="root_map")

    simu.update_soil()




.. image-sg:: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_001.png
   :alt: view from top (before extruding)
   :srcset: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    🔄 Update hap.in file
    🔄 update dem_parameters file 
    🔄 update dem_parameters file 
    ───────────────────────────────────────────── ⚠ warning messages above ⚠ ─────────────────────────────────────────────

                                The parm dictionnary is empty
                                Falling back to defaults to update CATHYH
                                This can have consequences !!
                            
    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
    🔄 update parm file 
    🔄 update zone file 
    🔄 update dem_parameters file 
    🔄 update parm file 
    🔄 Update soil
    homogeneous soil




.. GENERATED FROM PYTHON SOURCE LINES 61-66

.. code-block:: Python

    veg_map = simu.veg_map
    veg_map[2:6, 5:14] = 2
    simu.update_veg_map(veg_map)
    simu.show_input(prop="root_map")




.. image-sg:: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_002.png
   :alt: view from top (before extruding)
   :srcset: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 67-68

Feddes is a dictionnary with 6 entries, and for each a list

.. GENERATED FROM PYTHON SOURCE LINES 68-80

.. code-block:: Python


    FP_map_1zone = simu.soil_FP["FP_map"]  # read existing mapping
    FP_map_2zones = {}
    for k in FP_map_1zone:
        if k == "ZROOT":
            ZROOT_zone2 = FP_map_1zone["ZROOT"][0] / 2
            FP_map_2zones[k] = [FP_map_1zone[k][0], ZROOT_zone2]
        else:
            FP_map_2zones[k] = [FP_map_1zone[k][0], FP_map_1zone[k][0]]

    # simu.show_input(prop='soil', yprop='ZROOT', layer_nb=12)








.. GENERATED FROM PYTHON SOURCE LINES 81-90

.. code-block:: Python

    simu.update_soil(FP_map=FP_map_2zones, show=True)

    # simu.update_zone(veg_map)
    # simu.update_veg_map(veg_map)

    simu.show_input(prop="soil", yprop="PERMX", layer_nb=4)

    # Here we can imaging to get a more complexe vegetation map from remote sensing data instead




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_003.png
         :alt: plot 2 pyCATHY inputs
         :srcset: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_004.png
         :alt: view from top (before extruding), layer nb4
         :srcset: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    🔄 Update soil
    homogeneous soil

    <matplotlib.collections.QuadMesh object at 0x7f64d7d5eda0>



.. GENERATED FROM PYTHON SOURCE LINES 91-94

.. code-block:: Python


    simu.update_prepo_inputs()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    🔄 Update hap.in file
    🔄 update dem_parameters file 
    🔄 update dem_parameters file 




.. GENERATED FROM PYTHON SOURCE LINES 95-97

This will automatically create a new vtk mesh containing the zone flags
error --> number of tretra in grid3d < n of tretra in the mesh (mission one element)

.. GENERATED FROM PYTHON SOURCE LINES 97-99

.. code-block:: Python

    simu.update_zone()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    🔄 update zone file 
    🔄 update dem_parameters file 
    🔄 update parm file 




.. GENERATED FROM PYTHON SOURCE LINES 100-104

.. code-block:: Python


    simu.show_input(prop="soil", yprop="PERMX", layer_nb=1)
    simu.show_input(prop="soil", yprop="POROS", layer_nb=2)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_005.png
         :alt: view from top (before extruding), layer nb1
         :srcset: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_006.png
         :alt: view from top (before extruding), layer nb2
         :srcset: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_006.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.QuadMesh object at 0x7f64d8bd70d0>



.. GENERATED FROM PYTHON SOURCE LINES 105-106

Show layer number 10

.. GENERATED FROM PYTHON SOURCE LINES 106-109

.. code-block:: Python


    simu.show_input(prop="soil", yprop="VGNCELL", layer_nb=10)




.. image-sg:: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_007.png
   :alt: view from top (before extruding), layer nb10
   :srcset: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.QuadMesh object at 0x7f64d8ebf8b0>



.. GENERATED FROM PYTHON SOURCE LINES 110-114

.. code-block:: Python

    simu.update_soil()
    df_soil, _ = simu.read_inputs("soil")
    df = simu.read_inputs("soil")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    🔄 Update soil
    homogeneous soil




.. GENERATED FROM PYTHON SOURCE LINES 115-121

.. code-block:: Python

    zones = simu.zone
    simu.update_prepo_inputs()
    zones[5:14, 5:14] = 2
    simu.update_zone(zones)
    simu.show_input(prop="zone")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    🔄 Update hap.in file
    🔄 update dem_parameters file 
    🔄 update dem_parameters file 
    🔄 update zone file 
    🔄 update dem_parameters file 
    🔄 update parm file 




.. GENERATED FROM PYTHON SOURCE LINES 122-124

we just need to build a dictionnary as: {property: [value_zone1, value_zone2]}
or a panda dataframe

.. GENERATED FROM PYTHON SOURCE LINES 124-141

.. code-block:: Python


    SPP_map_1zone = simu.soil_SPP["SPP_map"]  # read existing mapping

    PERMX_zones = [SPP_map_1zone["PERMX"][0], 
             SPP_map_1zone["PERMX"][0]/2]

    SPP_map_zone2 = simu.init_soil_df(2, len(SPP_map_1zone))

    for c in SPP_map_1zone:
        SPP_map_zone2.loc[[0],c]=SPP_map_1zone[c].values
        SPP_map_zone2.loc[[1],c]=SPP_map_1zone[c].values

    for i, pi in enumerate(PERMX_zones):
        SPP_map_zone2.loc[[i],'PERMX']=PERMX_zones[i].values

    simu.update_soil(SPP_map=SPP_map_zone2)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    🔄 Update soil
    homogeneous soil




.. GENERATED FROM PYTHON SOURCE LINES 142-144

.. code-block:: Python

    simu.show_input(prop="soil", yprop="PERMX", layer_nb=2)




.. image-sg:: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_008.png
   :alt: view from top (before extruding), layer nb2
   :srcset: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.QuadMesh object at 0x7f64dabdb940>



.. GENERATED FROM PYTHON SOURCE LINES 145-146

.. code-block:: Python

    simu.show_input(prop="soil", yprop="PERMX", layer_nb=12)



.. image-sg:: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_009.png
   :alt: view from top (before extruding), layer nb12
   :srcset: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_009.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.collections.QuadMesh object at 0x7f64d882b940>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.809 seconds)


.. _sphx_glr_download_content_SSHydro_plot_2_pyCATHY_inputs.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_2_pyCATHY_inputs.ipynb <plot_2_pyCATHY_inputs.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_2_pyCATHY_inputs.py <plot_2_pyCATHY_inputs.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
