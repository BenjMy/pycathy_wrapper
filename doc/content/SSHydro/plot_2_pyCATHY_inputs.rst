
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "content/SSHydro/plot_2_pyCATHY_inputs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_content_SSHydro_plot_2_pyCATHY_inputs.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_content_SSHydro_plot_2_pyCATHY_inputs.py:


Input plots
===========

Weill, S., et al. « Coupling Water Flow and Solute Transport into a Physically-Based Surface–Subsurface Hydrological Model ». 
Advances in Water Resources, vol. 34, no 1, janvier 2011, p. 128‑36. DOI.org (Crossref), 
https://doi.org/10.1016/j.advwatres.2010.10.001.

This example shows how to use pyCATHY object to plot inputs of the hydrological model.

*Estimated time to run the notebook = 5min*

.. GENERATED FROM PYTHON SOURCE LINES 14-19

.. code-block:: default


    # map_prop_veg ?
    # map_prop2zone









.. GENERATED FROM PYTHON SOURCE LINES 20-26

.. code-block:: default


    import numpy as np

    from pyCATHY import cathy_tools
    from pyCATHY.plotters import cathy_plots as cplt








.. GENERATED FROM PYTHON SOURCE LINES 27-32

.. code-block:: default


    path2prj = "weil_exemple_inputs_plot"  # add your local path here
    simu = cathy_tools.CATHY(dirName=path2prj)
    # simu.run_preprocessor()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    🏁 Initiate CATHY object




.. GENERATED FROM PYTHON SOURCE LINES 33-35

.. code-block:: default

    simu.show_input(prop="dem")




.. image-sg:: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_001.png
   :alt: plot 2 pyCATHY inputs
   :srcset: /content/SSHydro/images/sphx_glr_plot_2_pyCATHY_inputs_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    🔄 Update hap.in file
    🔄 update dem_parameters file 




.. GENERATED FROM PYTHON SOURCE LINES 36-44

.. code-block:: default


    # show time atmbc
    # simu.show_input(prop='atmbc')

    # In progress --> show spatial atmbc

    # simu.update_dem_parameters()
    # simu.update_prepo_inputs()







.. GENERATED FROM PYTHON SOURCE LINES 45-46

In progress --> This will automatically create a new vtk mesh containing the

.. GENERATED FROM PYTHON SOURCE LINES 46-49

.. code-block:: default

    simu.show_input(prop="root_map")









.. GENERATED FROM PYTHON SOURCE LINES 50-51

Add a new zone

.. GENERATED FROM PYTHON SOURCE LINES 51-55

.. code-block:: default


    simu.update_prepo_inputs()
    simu.update_soil()



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/ben/Documents/GitHub/BenjMy/pycathy_wrapper/examples/SSHydro/plot_2_pyCATHY_inputs.py", line 53, in <module>
        simu.update_soil()
      File "/home/ben/Documents/GitHub/BenjMy/pycathy_wrapper/pyCATHY/cathy_tools.py", line 2297, in update_soil
        raise ValueError("Wrong number of zones")
    ValueError: Wrong number of zones




.. GENERATED FROM PYTHON SOURCE LINES 56-61

.. code-block:: default

    veg_map = simu.veg_map
    veg_map[2:6, 5:14] = 2
    simu.update_veg_map(veg_map)
    simu.show_input(prop="root_map")


.. GENERATED FROM PYTHON SOURCE LINES 62-63

Feddes is a dictionnary with 6 entries, and for each a list

.. GENERATED FROM PYTHON SOURCE LINES 63-75

.. code-block:: default


    FP_map_1zone = simu.soil_FP["FP_map"]  # read existing mapping
    FP_map_2zones = {}
    for k in FP_map_1zone:
        if k == "ZROOT":
            ZROOT_zone2 = FP_map_1zone["ZROOT"][0] / 2
            FP_map_2zones[k] = [FP_map_1zone[k][0], ZROOT_zone2]
        else:
            FP_map_2zones[k] = [FP_map_1zone[k][0], FP_map_1zone[k][0]]

    # simu.show_input(prop='soil', yprop='ZROOT', layer_nb=12)


.. GENERATED FROM PYTHON SOURCE LINES 76-85

.. code-block:: default

    simu.update_soil(FP_map=FP_map_2zones, show=True)

    # simu.update_zone(veg_map)
    # simu.update_veg_map(veg_map)

    simu.show_input(prop="soil", yprop="PERMX", layer_nb=4)

    # Here we can imaging to get a more complexe vegetation map from remote sensing data instead


.. GENERATED FROM PYTHON SOURCE LINES 86-89

.. code-block:: default


    simu.update_prepo_inputs()


.. GENERATED FROM PYTHON SOURCE LINES 90-92

This will automatically create a new vtk mesh containing the zone flags
error --> number of tretra in grid3d < n of tretra in the mesh (mission one element)

.. GENERATED FROM PYTHON SOURCE LINES 92-94

.. code-block:: default

    simu.update_zone()


.. GENERATED FROM PYTHON SOURCE LINES 95-99

.. code-block:: default


    simu.show_input(prop="soil", yprop="PERMX", layer_nb=1)
    simu.show_input(prop="soil", yprop="POROS", layer_nb=2)


.. GENERATED FROM PYTHON SOURCE LINES 100-101

Show layer number 10

.. GENERATED FROM PYTHON SOURCE LINES 101-104

.. code-block:: default


    simu.show_input(prop="soil", yprop="VGNCELL", layer_nb=10)


.. GENERATED FROM PYTHON SOURCE LINES 105-109

.. code-block:: default

    simu.update_soil()
    df_soil, _ = simu.read_inputs("soil")
    df = simu.read_inputs("soil")


.. GENERATED FROM PYTHON SOURCE LINES 110-116

.. code-block:: default

    zones = simu.zone
    simu.update_prepo_inputs()
    zones[5:14, 5:14] = 2
    simu.update_zone(zones)
    simu.show_input(prop="zone")


.. GENERATED FROM PYTHON SOURCE LINES 117-118

we just need to build a dictionnary as: {property: [value_zone1, value_zone2]}

.. GENERATED FROM PYTHON SOURCE LINES 118-133

.. code-block:: default


    # what if dimension of the heteregeneity is 3d?

    SPP_map_1zone = simu.soil_SPP["SPP_map"]  # read existing mapping
    SPP_map_2zones = {}
    for k in SPP_map_1zone:
        if k == "PERMX":
            PERMX_zone2 = SPP_map_1zone["PERMX"][0] / 2
            SPP_map_2zones[k] = [SPP_map_1zone[k][0], PERMX_zone2]
        else:
            SPP_map_2zones[k] = [SPP_map_1zone[k][0], SPP_map_1zone[k][0]]


    simu.update_soil(SPP_map=SPP_map_2zones)


.. GENERATED FROM PYTHON SOURCE LINES 134-137

.. code-block:: default

    simu.show_input(prop="soil", yprop="PERMX", layer_nb=2)

    simu.show_input(prop="soil", yprop="PERMX", layer_nb=12)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.902 seconds)


.. _sphx_glr_download_content_SSHydro_plot_2_pyCATHY_inputs.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_2_pyCATHY_inputs.py <plot_2_pyCATHY_inputs.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_2_pyCATHY_inputs.ipynb <plot_2_pyCATHY_inputs.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
