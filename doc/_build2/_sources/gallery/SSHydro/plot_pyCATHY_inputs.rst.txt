
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/SSHydro/plot_pyCATHY_inputs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_SSHydro_plot_pyCATHY_inputs.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_SSHydro_plot_pyCATHY_inputs.py:


Input plots
===========

This example shows how to use pyCATHY object to plot inputs of the hydrological model.

*Estimated time to run the notebook = 5min*

.. GENERATED FROM PYTHON SOURCE LINES 10-16

.. code-block:: default


    # map_prop_veg ?
    # map_prop2zone










.. GENERATED FROM PYTHON SOURCE LINES 17-22

.. code-block:: default


    from pyCATHY import cathy_tools
    from pyCATHY.plotters import cathy_plots as cplt
    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 23-27

.. code-block:: default


    path2prj ='weil_exemple_inputs_plot' # add your local path here
    simu = cathy_tools.CATHY(dirName=path2prj)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    🏁 Initiate CATHY object




.. GENERATED FROM PYTHON SOURCE LINES 28-30

.. code-block:: default

    simu.show_input(prop='dem')








.. GENERATED FROM PYTHON SOURCE LINES 31-38

.. code-block:: default


    # show time atmbc
    simu.show_input(prop='atmbc')

    # In progress --> show spatial atmbc





.. image-sg:: /gallery/SSHydro/images/sphx_glr_plot_pyCATHY_inputs_001.png
   :alt: atmbc inputs
   :srcset: /gallery/SSHydro/images/sphx_glr_plot_pyCATHY_inputs_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 39-40

In progress --> This will automatically create a new vtk mesh containing the 

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default

    simu.show_input(prop='root_map')









.. GENERATED FROM PYTHON SOURCE LINES 44-45

Add a new zone

.. GENERATED FROM PYTHON SOURCE LINES 45-72

.. code-block:: default


    simu.update_prepo_inputs()
    simu.update_veg_map() # calling without args to get the default values
    simu.update_soil()

    veg_map = simu.veg_map
    veg_map[2:6,5:14] = 2
    simu.update_veg_map(veg_map)
    simu.show_input(prop='root_map')


    FP_map_1zone = simu.soil_FP['FP_map'] # read existing mapping
    FP_map_2zones = {}
    for k in FP_map_1zone:
        if k == 'ZROOT':
            ZROOT_zone2 = FP_map_1zone['ZROOT'][0]/2
            FP_map_2zones[k] = [FP_map_1zone[k][0],ZROOT_zone2]
        else:
            FP_map_2zones[k] = [FP_map_1zone[k][0],FP_map_1zone[k][0]]
    
    # simu.show_input(prop='soil', yprop='ZROOT', layer_nb=12)

    simu.update_soil(FP_map=FP_map_2zones,
                     show=True)

    # Here we can imaging to get a more complexe vegetation map from remote sensing data instead




.. image-sg:: /gallery/SSHydro/images/sphx_glr_plot_pyCATHY_inputs_002.png
   :alt: plot pyCATHY inputs
   :srcset: /gallery/SSHydro/images/sphx_glr_plot_pyCATHY_inputs_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ✒ Update hap.in file
    ✒ update dem_parameters file 
    😔 cannot find existing dem paramters
    0.5
    0.5
    1.0
    1
    0.002   0.004   0.006   0.008   0.01    0.01    0.02    0.02    0.05    0.05    0.1     0.1     0.2  
    0.2     0.22




.. GENERATED FROM PYTHON SOURCE LINES 73-76

.. code-block:: default


    simu.update_prepo_inputs()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ✒ Update hap.in file
    ✒ update dem_parameters file 
    0.5
    0.5
    1.0
    1
    0.002   0.004   0.006   0.008   0.01    0.01    0.02    0.02    0.05    0.05    0.1     0.1     0.2  
    0.2     0.22




.. GENERATED FROM PYTHON SOURCE LINES 77-79

This will automatically create a new vtk mesh containing the zone flags
error --> number of tretra in grid3d < n of tretra in the mesh (mission one element)

.. GENERATED FROM PYTHON SOURCE LINES 79-81

.. code-block:: default

    simu.update_zone()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ✒ update dem_parameters file 
    0.5
    0.5
    1.0
    1
    0.002   0.004   0.006   0.008   0.01    0.01    0.02    0.02    0.05    0.05    0.1     0.1     0.2  
    0.2     0.22




.. GENERATED FROM PYTHON SOURCE LINES 82-85

.. code-block:: default


    simu.show_input(prop='soil', yprop='PERMX', layer_nb=1)








.. GENERATED FROM PYTHON SOURCE LINES 86-87

Show layer number 10

.. GENERATED FROM PYTHON SOURCE LINES 87-90

.. code-block:: default


    simu.show_input(prop='soil', yprop='VGNCELL', layer_nb=10)








.. GENERATED FROM PYTHON SOURCE LINES 91-95

.. code-block:: default

    simu.update_soil()
    df_soil, _ = simu.read_inputs('soil')
    df = simu.read_inputs('soil')








.. GENERATED FROM PYTHON SOURCE LINES 96-102

.. code-block:: default

    zones = simu.zone
    simu.update_prepo_inputs()
    zones[5:14,5:14] = 2
    simu.update_zone(zones)
    simu.show_input(prop='zone')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ✒ Update hap.in file
    ✒ update dem_parameters file 
    0.5
    0.5
    1.0
    1
    0.002   0.004   0.006   0.008   0.01    0.01    0.02    0.02    0.05    0.05    0.1     0.1     0.2  
    0.2     0.22
    ✒ update dem_parameters file 
    0.5
    0.5
    1.0
    1
    0.002   0.004   0.006   0.008   0.01    0.01    0.02    0.02    0.05    0.05    0.1     0.1     0.2  
    0.2     0.22




.. GENERATED FROM PYTHON SOURCE LINES 103-104

we just need to build a dictionnary as: {property: [value_zone1, value_zone2]}

.. GENERATED FROM PYTHON SOURCE LINES 104-119

.. code-block:: default


    # what if dimension of the heteregeneity is 3d?

    SPP_map_1zone = simu.soil_SPP['SPP_map'] # read existing mapping
    SPP_map_2zones = {}
    for k in SPP_map_1zone:
        if k == 'PERMX':
            PERMX_zone2 = SPP_map_1zone['PERMX'][0]/2
            SPP_map_2zones[k] = [SPP_map_1zone[k][0],PERMX_zone2]
        else:
            SPP_map_2zones[k] = [SPP_map_1zone[k][0],SPP_map_1zone[k][0]]
    

    simu.update_soil(SPP_map=SPP_map_2zones)








.. GENERATED FROM PYTHON SOURCE LINES 120-123

.. code-block:: default

    simu.show_input(prop='soil', yprop='PERMX', layer_nb=12)









.. GENERATED FROM PYTHON SOURCE LINES 124-126

Create grid
simu.run_processor(IPRT1=3) # only generate the grid

.. GENERATED FROM PYTHON SOURCE LINES 128-132

In progress
simu.show_bc(layer_nb=1, time=0)
import matplotlib.pyplot as plt
fig, ax = plt.subplots(1,3)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.362 seconds)


.. _sphx_glr_download_gallery_SSHydro_plot_pyCATHY_inputs.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_pyCATHY_inputs.py <plot_pyCATHY_inputs.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_pyCATHY_inputs.ipynb <plot_pyCATHY_inputs.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
