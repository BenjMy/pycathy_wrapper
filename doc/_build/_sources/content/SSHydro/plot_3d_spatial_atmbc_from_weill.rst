
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "content/SSHydro/plot_3d_spatial_atmbc_from_weill.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_content_SSHydro_plot_3d_spatial_atmbc_from_weill.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_content_SSHydro_plot_3d_spatial_atmbc_from_weill.py:


Update with spatially and temporally distributed atmospheric boundary conditions (bc)
====================================================================================

This tutorial demonstrates how to update atmospheric boundary conditions (bc) using spatially
and temporally distributed data in a hydrological model.

Reference:
Weill, S., et al. « Coupling Water Flow and Solute Transport into a Physically-Based Surface–Subsurface
Hydrological Model ». Advances in Water Resources, vol. 34, no 1, janvier 2011, p. 128‑36. DOI.org (Crossref),
https://doi.org/10.1016/j.advwatres.2010.10.001.

This example uses the **pyCATHY wrapper** for the CATHY model to reproduce results from the Weill et al. dataset.
The notebook is interactive and can be executed in sections to observe the intermediate results. It can also
be shared for collaborative work without any installation required.

*Estimated time to run the notebook = 5 minutes*

.. GENERATED FROM PYTHON SOURCE LINES 19-34

.. code-block:: Python


    # Import necessary libraries
    import os
    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    import pyvista as pv

    # Import pyCATHY modules for handling mesh, inputs, and outputs
    import pyCATHY.meshtools as mt
    from pyCATHY import cathy_tools
    from pyCATHY.importers import cathy_inputs as in_CT
    from pyCATHY.importers import cathy_outputs as out_CT
    from pyCATHY.plotters import cathy_plots as cplt



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/z0272571a@CAMPUS.CSIC.ES/Nextcloud/BenCSIC/Codes/BenjMy/pycathy_wrapper/examples/SSHydro/plot_3d_spatial_atmbc_from_weill.py", line 28, in <module>
        import pyCATHY.meshtools as mt
      File "/home/z0272571a@CAMPUS.CSIC.ES/Nextcloud/BenCSIC/Codes/BenjMy/pycathy_wrapper/pyCATHY/__init__.py", line 4, in <module>
        from . import cathy_utils, meshtools, sensitivity
      File "/home/z0272571a@CAMPUS.CSIC.ES/Nextcloud/BenCSIC/Codes/BenjMy/pycathy_wrapper/pyCATHY/meshtools.py", line 18, in <module>
        from pyCATHY.plotters import cathy_plots as cplt
      File "/home/z0272571a@CAMPUS.CSIC.ES/Nextcloud/BenCSIC/Codes/BenjMy/pycathy_wrapper/pyCATHY/plotters/cathy_plots.py", line 55, in <module>
        import rioxarray as rio
    ModuleNotFoundError: No module named 'rioxarray'




.. GENERATED FROM PYTHON SOURCE LINES 35-36

Define the project directory and model name. This example uses 'atmbc_spatially_from_weill'.

.. GENERATED FROM PYTHON SOURCE LINES 36-40

.. code-block:: Python

    path2prj = "../SSHydro/"  # Replace with your local project path
    simu = cathy_tools.CATHY(dirName=path2prj, prj_name="atmbc_spatially_from_weill_withnodata")
    figpath = "../results/DA_ET_test/"  # Path to store figures/results


.. GENERATED FROM PYTHON SOURCE LINES 41-42

Read the DEM input file

.. GENERATED FROM PYTHON SOURCE LINES 42-56

.. code-block:: Python

    DEM, dem_header = simu.read_inputs('dem')

    # Create a new DEM array filled with ones and add irregular boundary and invalid values (-9999)
    DEM_new = np.ones(np.shape(DEM))  # Initialize new DEM with ones
    DEM_new[-1, -1] = 1 - 1e-3  # Adjust a specific corner value
    DEM_new[10:20, 0:10] = -9999  # Add an interior block of invalid values to simulate an irregular boundary
    DEM_new[0:3, 15:20] = -9999  # Add an interior block of invalid values to simulate an irregular boundary

    # Update the CATHY inputs with the modified DEM
    simu.update_prepo_inputs(DEM_new)

    # Visualize the updated DEM
    simu.show_input('dem')


.. GENERATED FROM PYTHON SOURCE LINES 57-58

Run the preprocessor to handle inputs and generate the mesh

.. GENERATED FROM PYTHON SOURCE LINES 58-75

.. code-block:: Python

    simu.run_preprocessor()

    # Create a 3D mesh visualization (VTK format)
    simu.create_mesh_vtk(verbose=True)

    # Load the 3D grid output
    grid3d = simu.read_outputs('grid3d')

    # Set parameters for elevation
    simu.dem_parameters
    elevation_increment = 0.5 / 21  # Define elevation increment per row
    elevation_matrix = np.ones([21, 21])  # Initialize the elevation matrix

    # Populate elevation_matrix with incremental values based on row index
    for row in range(21):
        elevation_matrix[row, :] += row * elevation_increment


.. GENERATED FROM PYTHON SOURCE LINES 76-120

.. code-block:: Python


    # Set up time intervals and cycles for the boundary condition
    interval = 5  # Number of intervals
    ncycles = 7   # Number of cycles
    t_atmbc = np.linspace(1e-3, 36e3 * ncycles, interval * ncycles)  # Time vector

    # Atmospheric boundary condition value
    v_atmbc_value = -2e-7  # Set the boundary condition value

    # Check if the number of nodes matches the flattened elevation matrix
    if int(grid3d['nnod']) == len(np.ravel(elevation_matrix)):
        # Calculate the atmospheric boundary condition for each node based on elevation
        v_atmbc = np.ones(int(grid3d['nnod'])) * v_atmbc_value * np.ravel(elevation_matrix)
    else:
        # For cases where the number of nodes doesn't match, calculate for all nodes
        v_atmbc_all_nodes = np.ones(len(np.ravel(elevation_matrix))) * v_atmbc_value * np.ravel(np.exp(elevation_matrix**2))

        # Reshape the boundary condition values to match the DEM shape
        v_atmbc_mat = np.reshape(v_atmbc_all_nodes, [np.shape(simu.DEM)[0] + 1, np.shape(simu.DEM)[0] + 1])

        # Mask invalid values in the DEM (-9999) by setting them to NaN
        maskDEM_novalid = np.where(DEM_new == -9999)
        v_atmbc_mat[maskDEM_novalid] = np.nan

        # Flatten the masked matrix and remove NaN values
        v_atmbc = np.ravel(v_atmbc_mat)
        v_atmbc = v_atmbc[~np.isnan(v_atmbc)]  # Use ~np.isnan to filter out NaN values

    # Visualize the spatial variation of the atmospheric boundary condition
    fig, ax = plt.subplots()
    img = ax.imshow(v_atmbc_mat)
    plt.colorbar(img)

    # Update the atmospheric boundary condition (ATMB) parameters in CATHY
    simu.update_atmbc(
        HSPATM=0,
        IETO=0,
        time=t_atmbc,
        netValue=[v_atmbc] * len(t_atmbc)  # Apply the same boundary condition at all times
    )

    # Update the model parameters (time control) in CATHY
    simu.update_parm(TIMPRTi=t_atmbc)


.. GENERATED FROM PYTHON SOURCE LINES 121-133

.. code-block:: Python


    # Run the model processor with specified parameters for time stepping and output control
    simu.run_processor(
        IPRT1=2,  # Print results at time step 2
        DTMIN=1e-2,  # Minimum time step
        DTMAX=1e2,  # Maximum time step
        DELTAT=5,  # Time increment
        TRAFLAG=0,  # Transport flag off
        VTKF=2,  # Output VTK format
        verbose=True  # Turn off verbose mode
    )


.. GENERATED FROM PYTHON SOURCE LINES 134-144

.. code-block:: Python


    # Visualize the atmospheric boundary conditions in space using vtk
    cplt.show_vtk(
        unit="pressure",
        timeStep=1,  # Time step to display
        notebook=False,
        path=simu.workdir + "/atmbc_spatially_from_weill/vtk/",  # Path to VTK files
        savefig=True,  # Save the figure
    )


.. GENERATED FROM PYTHON SOURCE LINES 145-156

.. code-block:: Python


    # Create a time-lapse visualization of pressure distribution over time
    # cplt.show_vtk_TL(
    #     unit="saturation",
    #     notebook=False,
    #     path=simu.workdir + simu.project_name + "/vtk/",  # Path to VTK files
    #     show=False,  # Disable showing the plot
    #     x_units='days',  # Time units
    #     clim=[0.55, 0.70],  # Color limits for pressure values
    #     savefig=True,  # Save the figure
    # )


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.020 seconds)


.. _sphx_glr_download_content_SSHydro_plot_3d_spatial_atmbc_from_weill.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_3d_spatial_atmbc_from_weill.ipynb <plot_3d_spatial_atmbc_from_weill.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_3d_spatial_atmbc_from_weill.py <plot_3d_spatial_atmbc_from_weill.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_3d_spatial_atmbc_from_weill.zip <plot_3d_spatial_atmbc_from_weill.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
