
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "content/DA/plot_2_prepare_SMC_obs4DA (conflicted copy 2025-05-21 091532).py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_content_DA_plot_2_prepare_SMC_obs4DA (conflicted copy 2025-05-21 091532).py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_content_DA_plot_2_prepare_SMC_obs4DA (conflicted copy 2025-05-21 091532).py:


Read SMC sensors observations to assimilate
===========================================

The notebook illustrate how to read SMC sensors dataset to be prepare for DA

*Estimated time to run the notebook = 2min*

.. GENERATED FROM PYTHON SOURCE LINES 10-19

.. code-block:: Python

    import numpy as np
    from pyCATHY.DA.cathy_DA import DA
    import pandas as pd
    import matplotlib.pyplot as plt
    from pyCATHY.DA.cathy_DA import DA, dictObs_2pd
    from pyCATHY.DA.observations import read_observations, prepare_observations, make_data_cov
    from pathlib import Path
    import pyvista as pv








.. GENERATED FROM PYTHON SOURCE LINES 20-21

-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 21-27

.. code-block:: Python

    simuWithDA = DA(
                    dirName='./DA_with_swc',
                    prj_name='import_SMC',
                    notebook=True,
                    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    üèÅ Initiate CATHY object




.. GENERATED FROM PYTHON SOURCE LINES 28-30

------------------------------
Generate date range for two days at hourly intervals

.. GENERATED FROM PYTHON SOURCE LINES 30-51

.. code-block:: Python

    date_range = pd.date_range(start='2023-01-01', end='2023-01-03', freq='H')

    # Create smoother soil moisture data using cumulative sum of random changes
    sm_data = {f'SM{i}': np.cumsum(np.random.normal(0, 1, len(date_range))) + 25 + 10*i for i in range(1, 4)}

    # Create a dataframe with smoother data
    sm_smooth = pd.DataFrame(sm_data, index=date_range)

    # Plot the smoother soil moisture data
    sm_smooth.plot(figsize=(12, 6), marker='o')
    plt.xlabel('DateTime')
    plt.ylabel('Soil Moisture (%)')
    plt.title('Soil Moisture Content from SMC Sensors (Smoothed Data)')
    plt.legend()
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.tight_layout()
    plt.show()

    sm_smooth['Seconds'] = (sm_smooth.index - sm_smooth.index[0]).total_seconds()




.. image-sg:: /content/DA/images/sphx_glr_plot_2_prepare_SMC_obs4DA (conflicted copy 2025-05-21 091532)_001.png
   :alt: Soil Moisture Content from SMC Sensors (Smoothed Data)
   :srcset: /content/DA/images/sphx_glr_plot_2_prepare_SMC_obs4DA (conflicted copy 2025-05-21 091532)_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 52-87

.. code-block:: Python

    simuWithDA.create_mesh_vtk()

    SMC_XY = [5,5]
    SMC_depths = [0.05,0.25,0.75] # SMC depths
    # find the altitudes of the nodes at the mesh position x, y = (0.05,0.25)
    _ , closest = simuWithDA.find_nearest_node(SMC_XY)

    nodes_SMC = []
    closestPos = []
    for d in SMC_depths:
        SMC_XYZi = [5,5,closest[0][2]-d]
        nodeId, closest = simuWithDA.find_nearest_node(SMC_XYZi)
        nodes_SMC.append(nodeId)
        closestPos.append(closest)

    nodes_SMC = np.hstack(nodes_SMC)
    SMC_XYZ = np.vstack(closestPos)


    pl = pv.Plotter(notebook=True)
    mesh = pv.read(
        Path(simuWithDA.workdir) /
        simuWithDA.project_name /
        f'vtk/{simuWithDA.project_name}.vtk'
    )
    pl.add_mesh(mesh,
               opacity=0.7
               )
    pl.add_points(SMC_XYZ,
                 color='red'
                 )
    pl.show_grid()
    pl.show()






.. image-sg:: /content/DA/images/sphx_glr_plot_2_prepare_SMC_obs4DA (conflicted copy 2025-05-21 091532)_002.png
   :alt: plot 2 prepare SMC obs4DA (conflicted copy 2025 05 21 091532)
   :srcset: /content/DA/images/sphx_glr_plot_2_prepare_SMC_obs4DA (conflicted copy 2025-05-21 091532)_002.png
   :class: sphx-glr-single-img




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    üç≥ gfortran compilation
    üëü Run preprocessor
    üîÑ Update parm file 
    üîÑ Update hap.in file
    üîÑ Update dem_parameters file 
    üîÑ Update dem_parameters file 
    üõ†  Recompile src files [6s]
    üç≥ gfortran compilation [11s]
    b'/usr/bin/ld: cannot find -llapack: No such file or directory\n/usr/bin/ld: 
    cannot find -lblas: No such file or directory\ncollect2: error: ld returned 1 
    exit status\n'
    üòî Cannot find the new processsor
    üëü Run processor
    /opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/pyvista/jupyter/notebook.py:56: UserWarning: Failed to use notebook backend: 

    cannot import name 'vtk' from 'trame.widgets' (/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/trame/widgets/__init__.py)

    Falling back to a static output.
      warnings.warn(
    <PIL.Image.Image image mode=RGB size=2048x1536 at 0x7F44E620C070>




.. GENERATED FROM PYTHON SOURCE LINES 88-107

.. code-block:: Python

    abs_data_err = 1e-1 # constant error does not vary with time
    dict_obs = {} # initiate the dictionnary

    for i in range(len(sm_smooth.columns)-1):
        for j, assimilation_time_sec in enumerate(sm_smooth['Seconds']):
            dict_obs = read_observations(
                                            dict_obs,
                                            obs_2_add=sm_smooth[sm_smooth.columns[i]].iloc[j],
                                            tA=assimilation_time_sec,
                                            mesh_nodes = nodes_SMC[i],
                                            data_type='swc',
                                            data_err=abs_data_err,
                                            colname=' m¬≥/m¬≥ Water Content',
                                            datetime=sm_smooth.index[j]
                                            )

    data_measure_df = dictObs_2pd(dict_obs)
    data_measure_df





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time
    already existing assimilation time


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>filename</th>
          <th>data_type</th>
          <th>units</th>
          <th>data</th>
          <th>data_err</th>
          <th>mesh_nodes</th>
          <th>assimilation_times</th>
          <th>datetime</th>
          <th>data_cov</th>
          <th>dataPert</th>
          <th>sensor_name</th>
        </tr>
        <tr>
          <th>sensorNameidx</th>
          <th>assimilation time</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="5" valign="top">swc</th>
          <th>0.0</th>
          <td>None</td>
          <td>swc</td>
          <td>$m^{3}/m^{3}$</td>
          <td>37.051173</td>
          <td>0.1</td>
          <td>1984</td>
          <td>0.0</td>
          <td>2023-01-01 00:00:00</td>
          <td>[]</td>
          <td>[]</td>
          <td>swc</td>
        </tr>
        <tr>
          <th>3600.0</th>
          <td>None</td>
          <td>swc</td>
          <td>$m^{3}/m^{3}$</td>
          <td>37.636835</td>
          <td>0.1</td>
          <td>1984</td>
          <td>3600.0</td>
          <td>2023-01-01 01:00:00</td>
          <td>[]</td>
          <td>[]</td>
          <td>swc</td>
        </tr>
        <tr>
          <th>7200.0</th>
          <td>None</td>
          <td>swc</td>
          <td>$m^{3}/m^{3}$</td>
          <td>38.066362</td>
          <td>0.1</td>
          <td>1984</td>
          <td>7200.0</td>
          <td>2023-01-01 02:00:00</td>
          <td>[]</td>
          <td>[]</td>
          <td>swc</td>
        </tr>
        <tr>
          <th>10800.0</th>
          <td>None</td>
          <td>swc</td>
          <td>$m^{3}/m^{3}$</td>
          <td>37.459363</td>
          <td>0.1</td>
          <td>1984</td>
          <td>10800.0</td>
          <td>2023-01-01 03:00:00</td>
          <td>[]</td>
          <td>[]</td>
          <td>swc</td>
        </tr>
        <tr>
          <th>14400.0</th>
          <td>None</td>
          <td>swc</td>
          <td>$m^{3}/m^{3}$</td>
          <td>37.565586</td>
          <td>0.1</td>
          <td>1984</td>
          <td>14400.0</td>
          <td>2023-01-01 04:00:00</td>
          <td>[]</td>
          <td>[]</td>
          <td>swc</td>
        </tr>
        <tr>
          <th>...</th>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th rowspan="5" valign="top">swc2</th>
          <th>158400.0</th>
          <td>None</td>
          <td>swc</td>
          <td>$m^{3}/m^{3}$</td>
          <td>49.938846</td>
          <td>0.1</td>
          <td>5512</td>
          <td>158400.0</td>
          <td>2023-01-02 20:00:00</td>
          <td>[]</td>
          <td>[]</td>
          <td>swc2</td>
        </tr>
        <tr>
          <th>162000.0</th>
          <td>None</td>
          <td>swc</td>
          <td>$m^{3}/m^{3}$</td>
          <td>52.049451</td>
          <td>0.1</td>
          <td>5512</td>
          <td>162000.0</td>
          <td>2023-01-02 21:00:00</td>
          <td>[]</td>
          <td>[]</td>
          <td>swc2</td>
        </tr>
        <tr>
          <th>165600.0</th>
          <td>None</td>
          <td>swc</td>
          <td>$m^{3}/m^{3}$</td>
          <td>50.742917</td>
          <td>0.1</td>
          <td>5512</td>
          <td>165600.0</td>
          <td>2023-01-02 22:00:00</td>
          <td>[]</td>
          <td>[]</td>
          <td>swc2</td>
        </tr>
        <tr>
          <th>169200.0</th>
          <td>None</td>
          <td>swc</td>
          <td>$m^{3}/m^{3}$</td>
          <td>50.819298</td>
          <td>0.1</td>
          <td>5512</td>
          <td>169200.0</td>
          <td>2023-01-02 23:00:00</td>
          <td>[]</td>
          <td>[]</td>
          <td>swc2</td>
        </tr>
        <tr>
          <th>172800.0</th>
          <td>None</td>
          <td>swc</td>
          <td>$m^{3}/m^{3}$</td>
          <td>51.186530</td>
          <td>0.1</td>
          <td>5512</td>
          <td>172800.0</td>
          <td>2023-01-03 00:00:00</td>
          <td>[]</td>
          <td>[]</td>
          <td>swc2</td>
        </tr>
      </tbody>
    </table>
    <p>147 rows √ó 11 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 108-110

By default, there is no correlation between sensors
Therefore, the covariance matrices are diagonal with the error values on the diagonals

.. GENERATED FROM PYTHON SOURCE LINES 110-119

.. code-block:: Python


    _,_, stacked_data_cov = make_data_cov(
                                            simuWithDA,
                                            dict_obs,
                                            list_assimilated_obs = 'swc',
                                            )
    print(np.shape(stacked_data_cov))
    simuWithDA.stacked_data_cov = stacked_data_cov





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (49, 3, 3)




.. GENERATED FROM PYTHON SOURCE LINES 120-123

.. code-block:: Python

    import pickle
    with open('obs_prepared_SMC.pkl', 'wb') as fp:
        pickle.dump(dict_obs, fp)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.928 seconds)


.. _sphx_glr_download_content_DA_plot_2_prepare_SMC_obs4DA (conflicted copy 2025-05-21 091532).py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_2_prepare_SMC_obs4DA (conflicted copy 2025-05-21 091532).ipynb <plot_2_prepare_SMC_obs4DA (conflicted copy 2025-05-21 091532).ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_2_prepare_SMC_obs4DA (conflicted copy 2025-05-21 091532).py <plot_2_prepare_SMC_obs4DA (conflicted copy 2025-05-21 091532).py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_2_prepare_SMC_obs4DA (conflicted copy 2025-05-21 091532).zip <plot_2_prepare_SMC_obs4DA (conflicted copy 2025-05-21 091532).zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
