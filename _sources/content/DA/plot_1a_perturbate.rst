
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "content/DA/plot_1a_perturbate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_content_DA_plot_1a_perturbate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_content_DA_plot_1a_perturbate.py:


Creating and Managing Parameter Perturbation Scenarios for Data Assimilation
============================================================================

This notebook illustrates how to create, read, and prepare parameter perturbation scenarios
(using placeholders or suggested values) for Data Assimilation (DA) in pyCATHY.

The notebook explains how to:

1. **Initialize a DA simulation**
2. **Create scenario files** with placeholders or suggested values
3. **Read and inspect scenario files**
4. **Apply perturbations to the simulation**

*Estimated time to run the notebook: ~2 min*

.. GENERATED FROM PYTHON SOURCE LINES 18-21

Initialize the DA simulation
----------------------------
Create a DA object that will manage your simulations, parameter ensembles, and perturbations.

.. GENERATED FROM PYTHON SOURCE LINES 21-28

.. code-block:: Python

    from pyCATHY.DA.cathy_DA import DA

    simu = DA(
        dirName='.',
        prj_name='test_parameters_perturbation'
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    üèÅ Initiate CATHY object
    üòü src files not found
    working directory 
    is:/home/runner/work/pycathy_wrapper/pycathy_wrapper/examples/DA/.
    üì• Fetch cathy src files
    üì• Fetch cathy prepro src files
    üì• Fetch cathy input files




.. GENERATED FROM PYTHON SOURCE LINES 29-33

Create a scenario file using placeholders
-----------------------------------------
This creates a generic scenario where parameters are indicated with placeholders
like <value>, <sigma>, etc. It is useful for template purposes.

.. GENERATED FROM PYTHON SOURCE LINES 33-42

.. code-block:: Python

    from pyCATHY import cathy_utils

    cathy_utils.create_scenario_file(
        scenario_name="scenario_placeholders",
        param_names=["ic", "Ks"],
        use_common_values=False,  # Use placeholders instead of suggested values
        filetype="json"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Scenario file 'scenario_placeholders.json' created successfully for parameters: ['ic', 'Ks']

    'scenario_placeholders.json'



.. GENERATED FROM PYTHON SOURCE LINES 43-46

Create a scenario file using suggested values
---------------------------------------------
Here we create a scenario with realistic suggested values for parameters.

.. GENERATED FROM PYTHON SOURCE LINES 46-58

.. code-block:: Python

    cathy_utils.create_scenario_file_single_control(
        "scenario",
        parameters=["ic", "Ks"],
        use_suggested=True,
        control_type=None  # 'layers', 'zone', 'root_map', or None
    )

    # Read the scenario file and convert it to a DataFrame for inspection
    scenario = cathy_utils.read_scenario_file('scenario.json')
    scenario_df = cathy_utils.scenario_dict_to_df_list(scenario, 'scenario')
    print(scenario_df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Scenario file 'scenario.json' created successfully with parameters ['ic', 'Ks'] and control 'None'.
                  ic              Ks
    nom         -5.0          0.0004
    mean          -5               1
    sigma       1.75             0.5
    bounds      None          [0, 1]
    type        None  multiplicative
    sampling  normal          normal
    transf      None            None
    control     None            None




.. GENERATED FROM PYTHON SOURCE LINES 59-62

Scenario with perturbations by zones
-----------------------------------
Generate a scenario where perturbations are controlled per zone.

.. GENERATED FROM PYTHON SOURCE LINES 62-74

.. code-block:: Python

    cathy_utils.create_scenario_file_single_control(
        "scenario_zone",
        parameters=["ic", "Ks"],
        use_suggested=True,
        control_type='zone',  # Control perturbations per zone
        nzones=2
    )

    scenario_multipleZones = cathy_utils.read_scenario_file('scenario_zone.json')
    scenario_df = cathy_utils.scenario_dict_to_df_list(scenario_multipleZones, 'scenario_zone')
    print(scenario_df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Scenario file 'scenario_zone.json' created successfully with parameters ['ic', 'Ks'] and control 'zone'.
                            ic                                Ks
    nom               [-5, -5]                  [0.0004, 0.0004]
    mean              [-5, -5]                            [1, 1]
    sigma         [1.75, 1.75]                        [0.5, 0.5]
    bounds        [None, None]                  [[0, 1], [0, 1]]
    type          [None, None]  [multiplicative, multiplicative]
    sampling  [normal, normal]                  [normal, normal]
    transf        [None, None]                      [None, None]
    control               zone                              zone




.. GENERATED FROM PYTHON SOURCE LINES 75-78

Scenario with perturbations by root map
--------------------------------------
Create a scenario where perturbations are controlled per root map element.

.. GENERATED FROM PYTHON SOURCE LINES 78-90

.. code-block:: Python

    cathy_utils.create_scenario_file_single_control(
        "scenario_root_map",
        parameters=["ic", "porosity"],
        use_suggested=False,  # Use placeholders
        control_type='root_map',
        nveg=2
    )

    scenario_multipleLayers = cathy_utils.read_scenario_file('scenario_root_map.json')
    scenario_df = cathy_utils.scenario_dict_to_df_list(scenario_multipleLayers, 'scenario_root_map')
    print(scenario_df)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Scenario file 'scenario_root_map.json' created successfully with parameters ['ic', 'porosity'] and control 'root_map'.
                    ic  porosity
    nom       [[], []]  [[], []]
    mean      [[], []]  [[], []]
    sigma     [[], []]  [[], []]
    bounds    [[], []]  [[], []]
    type      [[], []]  [[], []]
    sampling  [[], []]  [[], []]
    transf    [[], []]  [[], []]
    control   root_map  root_map




.. GENERATED FROM PYTHON SOURCE LINES 91-94

Apply perturbations to the DA simulation
----------------------------------------
This step generates ensembles of perturbed parameters according to the scenario.

.. GENERATED FROM PYTHON SOURCE LINES 94-116

.. code-block:: Python

    from pyCATHY.DA import perturbate

    simu.MAXVEG = 1  # Example configuration
    list_pert = perturbate.perturbate(
        simu,
        scenario_multipleZones['scenario_zone'],
        256  # Ensemble size
    )

    var_per_dict_stacked = {}
    for dp in list_pert:
        var_per_dict_stacked = perturbate.perturbate_parm(
            var_per_dict_stacked,
            parm=dp,
            type_parm=dp['type_parm'],  # Can also be VAN GENUCHTEN parameters
            mean=dp['mean'],
            sd=dp['sd'],
            sampling_type=dp['sampling_type'],
            ensemble_size=dp['ensemble_size'],  # Size of the ensemble
            per_type=dp['per_type'],
            savefig=dp['savefig']
        )



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /content/DA/images/sphx_glr_plot_1a_perturbate_001.png
         :alt: Histogram of ic0
         :srcset: /content/DA/images/sphx_glr_plot_1a_perturbate_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /content/DA/images/sphx_glr_plot_1a_perturbate_002.png
         :alt: Histogram of Ks0
         :srcset: /content/DA/images/sphx_glr_plot_1a_perturbate_002.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.711 seconds)


.. _sphx_glr_download_content_DA_plot_1a_perturbate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_1a_perturbate.ipynb <plot_1a_perturbate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_1a_perturbate.py <plot_1a_perturbate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_1a_perturbate.zip <plot_1a_perturbate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
